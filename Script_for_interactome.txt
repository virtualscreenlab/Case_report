# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
library(STRINGdb)
library(dplyr)
library(igraph)
library(ggraph)
library(tidygraph)
library(ggplot2)
library(openxlsx)
library(Hmisc)
library(viridis)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
output_dir <- "C:/PPI/PatientK/Result"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
setwd(output_dir)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data <- read.delim(
  "C:/PPI/PatientK/input/Genes_K.csv",
  sep = ";",
  header = TRUE,
  col.names = c("pvalue", "logFC", "gene"),
  stringsAsFactors = FALSE
) %>%
  mutate(gene = trimws(gene))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≥–µ–Ω–æ–≤
corrected <- checkGeneSymbols(unique(data$gene), species = "human")
data <- data %>%
  mutate(
    original_gene = gene,
    gene = corrected$Suggested.Symbol[match(gene, corrected$x)]
  ) %>%
  filter(!is.na(gene)) %>%
  select(-original_gene)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ STRING
string_db <- STRINGdb$new(
  species = 9606,
  version = "12.0",
  score_threshold = 400,
  network_type = "full"
)

# –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
mapped_data <- string_db$map(data, "gene", removeUnmappedRows = TRUE)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
ppi_network <- string_db$get_subnetwork(mapped_data$STRING_id)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ tidygraph
ppi_tbl <- as_tbl_graph(ppi_network) %>%
  left_join(mapped_data, by = c("name" = "STRING_id")) %>%
  mutate(community = as.factor(group_louvain()))

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è PNG –∏ PDF ---
p <- ggraph(ppi_tbl, layout = "fr") +
  geom_edge_link(color = "grey80", alpha = 0.5, width = 0.3) +
  geom_node_point(aes(
    color = community,
    size = ifelse(is.na(logFC), 1, abs(logFC))
  )) +
  geom_node_text(
    aes(label = ifelse(abs(logFC) > 1.5, gene, "")),
    repel = TRUE,
    size = 2.5,
    color = "black",
    max.overlaps = 100
  ) +
  scale_color_viridis_d() +
  theme_void() +
  theme(
    legend.position = "none",
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16)
  ) +
  ggtitle("STRING-like Protein Interaction Network")

ggsave("PPI_STRING_Style_HQ.png", plot = p, width = 16, height = 16, dpi = 600, bg = "white")
ggsave("PPI_STRING_Style_HQ.pdf", plot = p, width = 16, height = 16)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ STRING (–º–∞–∫—Å 300 —É–∑–ª–æ–≤) ---
string_ids <- unique(mapped_data$STRING_id)
string_ids <- string_ids[1:min(300, length(string_ids))]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 300
string_link <- string_db$get_link(string_ids)
cat("\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Ç—å STRING:\n", string_link, "\n")
browseURL(string_link)

# --- –¢–æ–ø-30 –ø–æ —á–∏—Å–ª—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π ---
top30 <- degree(ppi_network, mode = "all") %>%
  sort(decreasing = TRUE) %>%
  head(30) %>%
  as.data.frame() %>%
  tibble::rownames_to_column("STRING_id") %>%
  rename(connections = ".")

top30 <- top30 %>%
  left_join(mapped_data, by = "STRING_id") %>%
  select(STRING_id, connections, gene, pvalue)

# --- Excel-—Ç–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–ø-30 ---
wb <- createWorkbook()
addWorksheet(wb, "Top30_Proteins")
writeData(wb, "Top30_Proteins", top30)
setColWidths(wb, "Top30_Proteins", cols = 1:4, widths = "auto")
saveWorkbook(wb, "Top30_Proteins.xlsx", overwrite = TRUE)

# --- –ò—Ç–æ–≥ ---
cat("\n‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n",
    "‚Ä¢ PNG-–≥—Ä–∞—Ñ–∏–∫: PPI_STRING_Style_HQ.png\n",
    "‚Ä¢ PDF-–≥—Ä–∞—Ñ–∏–∫: PPI_STRING_Style_HQ.pdf\n",
    "‚Ä¢ Excel —Ç–∞–±–ª–∏—Ü–∞: Top30_Proteins.xlsx\n",
    "‚Ä¢ STRING-—Å—Å—ã–ª–∫–∞: ", string_link, "\n")
